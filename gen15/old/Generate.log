#================================================================================
# Start of top joboptions
#================================================================================
# Run arguments file auto-generated on Tue Jun  2 12:45:05 2015 by:
# JobTransform: Generate
# Version: unknown

# Authors: Andy Buckley <Andy.Buckley@cern.ch>
#          Borut Kersevan <Borut.Kersevan@cern.ch>

#################################################################################
from PyJobTransformsCore.runargs import RunArguments

runArgs = RunArguments()


# Maximum number of events to process
runArgs.maxEvents = 100

# List of strings separated by commas
runArgs.jobConfig = ['MC12.205048.Herwigpp_UEEE4_CTEQ6L1_sM_wA_WZ_C1_100_N1_0.py']

# number of the first event in the output data file
runArgs.firstEvent = 1

# random seed for generator
runArgs.randomSeed = 1

# Run number of data file
runArgs.runNumber = 205048

# Output file that contains generated events with min. contents check
runArgs.outputEVNTFile = 'test.EVNT.pool.root'

# Center of mass energy parameter in GeV
runArgs.ecmEnergy = 13000
"""Functionality core of the Generate_trf transform"""

import glob, os, re
import traceback

## Standard framework objects with standard local scope names
from AthenaCommon.AppMgr import theApp
from AthenaCommon.AlgSequence import AlgSequence
topSequence = AlgSequence()
topAlg = topSequence
from AthenaCommon.AthenaCommonFlags import jobproperties

## Set up a standard logger
from AthenaCommon.Logging import logging
evgenLog = logging.getLogger('Generate')

## Run performance monitoring (memory logging)
from PerfMonComps.PerfMonFlags import jobproperties as perfmonjp
perfmonjp.PerfMonFlags.doMonitoring = True
perfmonjp.PerfMonFlags.doSemiDetailedMonitoring = True

##==============================================================
## Basic configuration
##==============================================================

## Start of run banner
evgenLog.info('****************** STARTING EVENT GENERATION *****************')
evgenLog.info(str(runArgs))

## Special setup for event generation
include("AthenaCommon/Atlas_Gen.UnixStandardJob.py")
include("PartPropSvc/PartPropSvc.py")

## Random number services
from AthenaServices.AthenaServicesConf import AtRndmGenSvc, AtRanluxGenSvc
svcMgr += AtRndmGenSvc()
svcMgr += AtRanluxGenSvc()

## Jobs should stop if an include fails.
jobproperties.AthenaCommonFlags.AllowIgnoreConfigError = False
if hasattr(runArgs, "IgnoreConfigError"):
    jobproperties.AthenaCommonFlags.AllowIgnoreConfigError = runArgs.IgnoreConfigError

## Compatibility with jets
from RecExConfig.RecConfFlags import jobproperties
jobproperties.RecConfFlags.AllowBackNavigation = True
from JetRec.JetRecFlags import jobproperties as jobpropjet
jobpropjet.JetRecFlags.inputFileType = "GEN"

## Ensure that an output name has been given, and configure POOL streaming to it
# TODO: Allow generation without writing an output file (if outputEVNTFile is None)?
if not hasattr(runArgs, "outputEVNTFile"):
    raise RuntimeError("No output evgen EVNT file provided.")
include("EvgenJobTransforms/Generate_pool_out.py")

## Ensure that mandatory args have been supplied (complain before processing the includes)
if not hasattr(runArgs, "ecmEnergy"):
    raise RuntimeError("No center of mass energy provided.")
if not hasattr(runArgs, "randomSeed"):
    raise RuntimeError("No random seed provided.")
if not hasattr(runArgs, "runNumber"):
    raise RuntimeError("No run number provided.")
    # TODO: or guess it from the JO name??
if not hasattr(runArgs, "firstEvent"):
    raise RuntimeError("No first number provided.")


##==============================================================
## Specific job definition
##==============================================================

## Provide functions for operating on generator names
## NOTE: evgenConfig, topAlg, svcMgr, theApp and evgenLog shouldn't be explicitly re-imported in JOs
from EvgenJobTransforms.EvgenConfig import evgenConfig, gens_known, gens_lhef, gen_sortkey

## Pre-include
if hasattr(runArgs, "preInclude"):
    for fragment in runArgs.preInclude:
        include(fragment)

## Pre-exec
if hasattr(runArgs, "preExec"):
    evgenLog.info("Transform pre-exec")
    for cmd in runArgs.preExec:
        evgenLog.info(cmd)
        exec(cmd)

def OutputTXTFile():
    outputTXTFile=None
    if hasattr(runArgs,"outputTXTFile"): outputTXTFile=runArgs.outputTXTFile
    return outputTXTFile

## Main job option include
## Only permit one jobConfig argument for evgen: does more than one _ever_ make sense?
if len(runArgs.jobConfig) != 1:
    evgenLog.error("You must supply one and only one jobConfig file argument")
    sys.exit(1)
jo = runArgs.jobConfig[0]
jofile = os.path.basename(jo)
joparts = jofile.split(".")
## Perform some consistency checks if this appears to be an "official" production JO
if joparts[0].startswith("MC"):
    ## Check that the JO does not appear to be an old one from MC10 or MC11, since we can't use those
    if int(joparts[0][2:]) < 12:
        evgenLog.error("MC11 (or earlier) job option scripts will not work with this version of Generate_trf!")
        evgenLog.error(jo + " will not be processed: please rename or otherwise update to a >= MC12 JO.")
        sys.exit(1)
    ## Check that there are exactly 4 name parts separated by '.': MCxx, DSID, physicsShort, .py
    if len(joparts) != 4:
        evgenLog.error(jofile + " name format is wrong: must be of the form MC<xx>.<yyyyyy>.<physicsShort>.py: please rename.")
        sys.exit(1)
    ## Check the DSID part of the name
    jo_dsidpart = joparts[1]
    try:
        jo_dsidpart = int(jo_dsidpart)
        if runArgs.runNumber != jo_dsidpart:
            raise Exception()
    except:
        evgenLog.error("Expected dataset ID part of JO name to be '%s', but found '%s'" % (str(runArgs.runNumber), jo_dsidpart))
        sys.exit(1)
    ## Check the length limit on the physicsShort portion of the filename
    jo_physshortpart = joparts[2]
    if len(jo_physshortpart) > 60:
        evgenLog.error(jofile + " contains a physicsShort field of more than 60 characters: please rename.")
        sys.exit(1)
    ## There must be at least 3 physicsShort sub-parts separated by '_': gens, (tune)+PDF, and process
    jo_physshortparts = jo_physshortpart.split("_")
    if len(jo_physshortparts) < 3:
        # TODO: Convert to an error and exit in MC14
        evgenLog.warning(jofile + " has too few physicsShort fields separated by '_': should contain at least <generators>_<tune+PDF>_<process>: please rename.")
        #sys.exit(1)
    ## NOTE: a further check on physicsShort consistency is done below, after fragment loading
## Include the JO fragment
include(jo)


##==============================================================
## Config propagation to services, generators, etc.
##==============================================================

## Print out options
for opt in str(evgenConfig).split(os.linesep):
    evgenLog.info(opt)

## Check that the generators list is not empty...
if not evgenConfig.generators:
    evgenLog.error("No entries in evgenConfig.generators: invalid configuration, please check your JO")
    sys.exit(1)

## Propagate energy argument to the generators
include("EvgenJobTransforms/Generate_ecmenergies.py")

## Process random seed arg and pass to generators
include("EvgenJobTransforms/Generate_randomseeds.py")

## Set the run numbers
svcMgr.EventSelector.RunNumber = runArgs.runNumber

## Handle beam info
import EventInfoMgt.EventInfoMgtInit
svcMgr.TagInfoMgr.ExtraTagValuePairs += ["beam_energy", str(int(runArgs.ecmEnergy*Units.GeV/2.0))]
svcMgr.TagInfoMgr.ExtraTagValuePairs += ["beam_type", 'collisions']

## Add special config option (extended model info for BSM scenarios)
svcMgr.TagInfoMgr.ExtraTagValuePairs += ["specialConfiguration", evgenConfig.specialConfig ]

## Save jet collection if requested in the job config
if evgenConfig.saveJets:
    StreamEVGEN.ItemList += ["JetCollection#*"]

## Run TestHepMC (not appropriate for all generators)
include("EvgenJobTransforms/Generate_TestHepMC.py")

## Some generators need event weights
include("EvgenJobTransforms/Generate_EventWeight.py")

## Check that the evgenConfig.minevents setting is acceptable
## minevents defines the production event sizes and must be sufficiently "round"
if evgenConfig.minevents < 1:
    raise RunTimeError("evgenConfig.minevents must be at least 1")
else:
    allowed_minevents_lt1000 = [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]
    msg = "evgenConfig.minevents = %d: " % evgenConfig.minevents
    if evgenConfig.minevents >= 1000 and evgenConfig.minevents % 1000 != 0:
        msg += "minevents in range >= 1000 must be a multiple of 1000"
        raise RuntimeError(msg)
    elif evgenConfig.minevents < 1000 and evgenConfig.minevents not in allowed_minevents_lt1000:
        msg += "minevents in range < 1000 must be one of %s" % allowed_minevents_lt1000
        raise RuntimeError(msg)

## Configure the event counting (AFTER other filters like TestHepMC)
include("EvgenJobTransforms/Generate_CountHepMC.py")

## Print out the contents of the first 5 events (after filtering)
# TODO: Allow configurability from command-line/exec/include args
if not "PRINTMC" in dir() or PRINTMC > 0:
    from TruthExamples.TruthExamplesConf import PrintMC
    topAlg += PrintMC()
    topAlg.PrintMC.McEventKey = "GEN_EVENT"
    topAlg.PrintMC.VerboseOutput = True
    topAlg.PrintMC.PrintStyle = "Barcode"
    topAlg.PrintMC.FirstEvent = 1
    topAlg.PrintMC.LastEvent =  5


##==============================================================
## Special handling of a post-include/exec args after all filters etc.
## Intended for testing where an analysis alg is added as part of the evgen trf
##==============================================================

if hasattr(runArgs, "postInclude"):
    for fragment in runArgs.postInclude:
        include(fragment)

if hasattr(runArgs, "postExec"):
    evgenLog.info("Transform post-exec")
    for cmd in runArgs.postExec:
        evgenLog.info(cmd)
        exec(cmd)


##==============================================================
## Sort and check generator name / JO name consistency
##==============================================================

## Get a list of generator names, appropriately sorted
gennames = sorted(evgenConfig.generators, key=gen_sortkey)

## Check that the actual generators, tune, and main PDF are consistent with the JO name
if joparts[0].startswith("MC"): #< if this is an "official" JO
    genpart = jo_physshortparts[0]
    expectedgenpart = ''.join(gennames)
    def _norm(s):
        return s.replace("Photospp", "").replace("Photos", "").replace("Tauola", "")
    if genpart != expectedgenpart and _norm(genpart) != _norm(expectedgenpart):
        # TODO: Convert to an error and exit in MC14
        evgenLog.warning("Expected first part of JO name to be '%s' or '%s', but found '%s'" % (_norm(expectedgenpart), expectedgenpart, genpart))
        #sys.exit(1)
    del _norm
    # TODO: add checking of the PDF part (and the tune?)


##==============================================================
## Write out metadata for reporting to AMI
##==============================================================

def _checkattr(attr, required=False):
    if not hasattr(evgenConfig, attr) or not getattr(evgenConfig, attr):
        msg = "evgenConfig attribute '%s' not found." % attr
        if required:
            raise RuntimeError("Required " + msg)
        return False
    return True

if _checkattr("description", required=True):
    msg = evgenConfig.description
    if _checkattr("notes"):
        msg += " " + evgenConfig.notes
    print "MetaData: %s = %s" % ("physicsComment", msg)
if _checkattr("generators", required=True):
    print "MetaData: %s = %s" % ("generatorName", "+".join(gennames))
if _checkattr("process"):
    print "MetaData: %s = %s" % ("physicsProcess", evgenConfig.process)
if _checkattr("tune"):
    print "MetaData: %s = %s" % ("generatorTune", evgenConfig.tune)
if _checkattr("hardPDF"):
    print "MetaData: %s = %s" % ("hardPDF", evgenConfig.hardPDF)
if _checkattr("softPDF"):
    print "MetaData: %s = %s" % ("softPDF", evgenConfig.softPDF)
if _checkattr("keywords"):
    print "MetaData: %s = %s" % ("keywords", ", ".join(evgenConfig.keywords).lower())
if _checkattr("specialConfig"):
   print "MetaData: %s = %s" % ("specialConfig", evgenConfig.specialConfig)
if _checkattr("contact"):
    print "MetaData: %s = %s" % ("contactPhysicist", ", ".join(evgenConfig.contact))


##==============================================================
## Input file arg handling
##==============================================================

## Dat files
datFile = None
if "McAtNlo" in evgenConfig.generators and "Herwig" in evgenConfig.generators:
    datFile = "inparmMcAtNlo.dat"
elif "Alpgen" in evgenConfig.generators:
    datFile = "inparmAlpGen.dat"
elif "Protos" in evgenConfig.generators:
     datFile = "protos.dat"
elif "AcerMC" in evgenConfig.generators:
    datFile = "inparmAcerMC.dat"
elif "CompHep" in evgenConfig.generators:
    datFile = "inparmCompHep.dat"

## Events files
eventsFile = None
if "Alpgen" in evgenConfig.generators:
    eventsFile = "alpgen.unw_events"
elif "Protos" in evgenConfig.generators: # TODO: converting to LHEF
    eventsFile = "protos.events"
elif "BeamHaloGenerator" in evgenConfig.generators:
    eventsFile = "beamhalogen.events"
elif "HepMCAscii" in evgenConfig.generators:
    eventsFile = "events.hepmc"
elif gens_lhef(evgenConfig.generators):
    eventsFile = "events.lhe"

## Helper functions for input file handling
def find_unique_file(pattern):
    "Return a matching file, provided it is unique"
    files = glob.glob(pattern)
    ## Check that there is exactly 1 match
    if not files:
        raise RuntimeError("No '%s' file found" % pattern)
    elif len(files) > 1:
        raise RuntimeError("More than one '%s' file found" % pattern)
    return files[0]

def mk_symlink(srcfile, dstfile):
    "Make a symlink safely"
    if dstfile:
        if os.path.exists(dstfile) and not os.path.samefile(dstfile, srcfile):
            os.remove(dstfile)
        if not os.path.exists(dstfile):
            evgenLog.info("Symlinking %s to %s" % (srcfile, dstfile))
            print "Symlinking %s to %s" % (srcfile, dstfile)
            os.symlink(srcfile, dstfile)
        else:
            evgenLog.debug("Symlinking: %s is already the same as %s" % (dstfile, srcfile))


## Find and symlink dat and event files, so they are available via the name expected by the generator
if eventsFile or datFile:
    if not hasattr(runArgs, "inputGeneratorFile") or runArgs.inputGeneratorFile == "NONE":
        raise RuntimeError("%s needs input file (argument inputGeneratorFile)" % runArgs.jobConfig)
    if evgenConfig.inputfilecheck and not re.search(evgenConfig.inputfilecheck, runArgs.inputGeneratorFile):
        raise RuntimeError("inputGeneratorFile=%s is incompatible with inputfilecheck '%s' in %s" %
                           (runArgs.inputGeneratorFile, evgenConfig.inputfilecheck, runArgs.jobConfig))
    inputroot = os.path.basename(runArgs.inputGeneratorFile).split("._")[0]
    if datFile:
        realDatFile = find_unique_file('*%s*.dat' % inputroot)
        mk_symlink(realDatFile, datFile)
    if eventsFile:
        realEventsFile = find_unique_file('*%s.*.ev*ts' % inputroot)
        mk_symlink(realEventsFile, eventsFile)
else:
    if hasattr(runArgs, "inputGeneratorFile") and runArgs.inputGeneratorFile != "NONE":
        raise RuntimeError("inputGeneratorFile arg specified for %s, but generators %s do not require an input file" %
                           (runArgs.jobConfig, str(gennames)))
    if evgenConfig.inputfilecheck:
        raise RuntimeError("evgenConfig.inputfilecheck specified in %s, but generators %s do not require an input file" %
                           (runArgs.jobConfig, str(gennames)))


## Check conf files, as above but for a different command line arg, and with omission allowed
if hasattr(runArgs, "inputGenConfFile") and runArgs.inputGenConfFile != "NONE":
    if evgenConfig.inputconfcheck and not re.search(evgenConfig.inputconfcheck, runArgs.inputGenConfFile):
        raise RuntimeError("inputGenConfFile=%s is incompatible with inputconfcheck (%s) in %s" %
                           (runArgs.inputGenConfFile, evgenConfig.inputconfcheck, runArgs.jobConfig))


## Do the aux-file copying
if evgenConfig.auxfiles:
    from PyJobTransformsCore.trfutil import get_files
    get_files(evgenConfig.auxfiles, keepDir=False, errorIfNotFound=True)


##==============================================================
## Dump evgenConfig so it can be recycled in post-run actions
##==============================================================

from PyJobTransformsCore.runargs import RunArguments
runPars = RunArguments()
runPars.minevents = evgenConfig.minevents
runPars.maxeventsstrategy = evgenConfig.maxeventsstrategy
with open("config.pickle", 'w') as f:
    import cPickle
    cPickle.dump(runPars, f)
#--------------------------------------------------------------------------------
# Replacing MessageSvc with LoggedMessageSvc
#--------------------------------------------------------------------------------
try:
   from AthenaServices import SummarySvc
except:
   print 'Could not import AthenaServices.SummarySvc'
   try:
      from AthenaCommon.AppMgr import ServiceMgr, theApp
      import AthenaCommon.ConfigurableDb as ConfDb
      from AthenaServices.AthenaServicesConf import AthenaSummarySvc
      from AthenaCommon.OldStyleConfig import Service
   except:
      print 'Could not import required modules to enable use of LoggedMessageSvc.'
   else:
      print 'Using AthenaServices...'
      from AthenaServices.AthenaServicesConf import AthenaSummarySvc
      AthenaSummarySvc.SummaryFile = 'AthenaSummary_Generate.txt'
      theApp.CreateSvc += ['AthenaSummarySvc']
      AthenaSummarySvc = Service('AthenaSummarySvc')
      ServiceMgr += AthenaSummarySvc
      theApp.MessageSvcType = 'LoggedMessageSvc'
      try:
         oldMsgSvcName = ServiceMgr.MessageSvc.name()
      except AttributeError:
         oldMsgSvcName = 'MessageSvc'
         oldMsgSvcItems = []
      else:
         oldMsgSvcItems = ServiceMgr.MessageSvc.getValuedProperties().items()
         del ServiceMgr.MessageSvc
      try:
         del ServiceMgr.allConfigurables[ oldMsgSvcName ]
      except KeyError:
         pass
      newMsgSvc = ConfDb.getConfigurable( theApp.MessageSvcType )( oldMsgSvcName )
      for name, value in oldMsgSvcItems:
         setattr( newMsgSvc, name, value )
      ServiceMgr += newMsgSvc
      MessageSvc = ServiceMgr.MessageSvc
else:
   print 'Using AthenaServices.SummarySvc...'
   from AthenaServices.AthenaServicesConf import AthenaSummarySvc
   AthenaSummarySvc.SummaryFile = 'AthenaSummary_Generate.txt'
   SummarySvc.useAthenaSummarySvc()
#================================================================================
# End of top joboptions
#================================================================================
Tue Jun  2 12:45:05 EDT 2015
Preloading tcmalloc_minimal.so
/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc5-gcc43-opt/17.2.14/AtlasCore/17.2.14/InstallArea/share/bin/athena.py runargs.Generate.py EvgenJobTransforms/skeleton.GENtoEVGEN.py Generate_messageSvc_jobOptions.py
Py:Athena            INFO including file "AthenaCommon/Preparation.py"
Py:Athena            INFO using release [AtlasProduction-17.2.14.6] [x86_64-slc5-gcc43-opt] [17.2.X.Y-VAL-Prod/rel_1] -- built on [2015-02-01 22:28]
Py:Athena            INFO including file "AthenaCommon/Bootstrap.py"
Py:Athena            INFO including file "AthenaCommon/Atlas.UnixStandardJob.py"
[?1034hPy:AthFile           INFO loading cache from [athfile-cache.ascii.gz]...
Py:AthFile           INFO loading cache from [athfile-cache.ascii.gz]... [done]
Py:Athena            INFO including file "AthenaCommon/Execution.py"
Py:Athena            INFO including file "runargs.Generate.py"
Py:Athena            INFO including file "EvgenJobTransforms/skeleton.GENtoEVGEN.py"
Py:Generate          INFO ****************** STARTING EVENT GENERATION *****************
Py:Generate          INFO RunArguments:
   ecmEnergy = 13000
   firstEvent = 1
   jobConfig = ['MC12.205048.Herwigpp_UEEE4_CTEQ6L1_sM_wA_WZ_C1_100_N1_0.py']
   maxEvents = 100
   outputEVNTFile = 'test.EVNT.pool.root'
   randomSeed = 1
   runNumber = 205048
Py:Athena            INFO including file "AthenaCommon/Atlas_Gen.UnixStandardJob.py"
Py:Athena            INFO including file "PartPropSvc/PartPropSvc.py"
Py:Athena            INFO including file "EvgenJobTransforms/Generate_pool_out.py"
Py:ConfigurableDb    INFO Read module info for 5675 configurables from 10 genConfDb files
Py:ConfigurableDb WARNING Found 2 duplicates among the 10 genConfDb files :
Py:ConfigurableDb WARNING --------------------------------------------------
Py:ConfigurableDb WARNING   -<component name>: <module> - [ <duplicates> ]
Py:ConfigurableDb WARNING --------------------------------------------------
Py:ConfigurableDb WARNING   -D3PD__PanTauDetailsFillerTool: PanTauAnalysis.PanTauAnalysisConf - ['TauD3PDMaker.TauD3PDMakerConf']
Py:ConfigurableDb WARNING   -D3PD__TauPanTauDetailsFillerTool: PanTauAnalysis.PanTauAnalysisConf - ['TauD3PDMaker.TauD3PDMakerConf']
Py:ConfigurableDb WARNING Fix your cmt/requirements file !!
Py:Athena            INFO including file "MC12.205048.Herwigpp_UEEE4_CTEQ6L1_sM_wA_WZ_C1_100_N1_0.py"
Shortened traceback (most recent user call last):
  File "/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc5-gcc43-opt/17.2.14/AtlasProduction/17.2.14.6/InstallArea/jobOptions/EvgenJobTransforms/skeleton.GENtoEVGEN.py", line 134, in <module>
    include(jo)
  File "./MC12.205048.Herwigpp_UEEE4_CTEQ6L1_sM_wA_WZ_C1_100_N1_0.py", line 11, in <module>
    include ( 'MC12JobOptions/Herwigpp_UEEE4_CTEQ6L1_Common.py' )
IncludeError: include file MC12JobOptions/Herwigpp_UEEE4_CTEQ6L1_Common.py can not be found
Py:Athena            INFO leaving with code 2: "an error occurred when including a file"
INFO: read 119 error categories from file /cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc5-gcc43-opt/17.2.14/AtlasCore/17.2.14/InstallArea/share/atlas_error_categories.db
/cvmfs/atlas.cern.ch/repo/sw/software/x86_64-slc5-gcc43-opt/17.2.14/AtlasCore/17.2.14/InstallArea/share/bin/athena.py -b runargs.Generate.py EvgenJobTransforms/skeleton.GENtoEVGEN.py Generate_messageSvc_jobOptions.py - exit code 2
