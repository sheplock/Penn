#! /usr/bin/env python

"""\
Check that ATLAS production job options files have filenames and contents that
conform with ATLAS production rules.

Usage: %prog <jo1.py> <jo2.py> ...

"""

from EvgenJobTransforms.EvgenConfig import evgenConfig
from EvgenJobTransforms.EvgenConfig import gens_known, gens_lhef, gen_sortkey, gens_testhepmc, gens_notune

## Define compiled regex objects for compliance checks
import re, os, string
RE_JONAME = re.compile(r"^MC15\.[\dx]{6}\.\w+\.py") # update for each MCXX campaign
RE_KEYWORDS = re.compile(r"evgenConfig\.keywords\s*=")
RE_MINEVENTS = re.compile(r"evgenConfig\.minevents\s*=")
RE_GENERATORSPLUS = re.compile(r"evgenConfig\.generators\s*\+=")
RE_GENERATORS = re.compile(r"evgenConfig\.generators\s*=")
RE_EVGENCONFIG = re.compile(r"import\s+.*evgenConfig")
RE_REDEFINITION = re.compile(r"(.*?)\s*=\s*\1\s*\(")
RE_INPUTBASE = re.compile(r"evgenConfig\.input(file|conf)base\s*=")
RE_DESCRIPTION = re.compile(r"evgenConfig\.description\s*=")
RE_PROCESS = re.compile(r"evgenConfig\.process\s*=")
RE_EFFICIENCY = re.compile(r"evgenConfig\.efficiency\s*=")
RE_AFSPATH = re.compile(r"/afs")
RE_IMPORTALGSEQUENCE = re.compile(r"from AthenaCommon.AlgSequence import AlgSequence")
RE_SETTOPALG = re.compile(r"topAlg\s*=")
RE_SETGENSEQ = re.compile(r"genSeq\s*=")
RE_SETFILTSEQ = re.compile(r"filtSeq\s*=")
RE_UNIXGENJOB = re.compile(r"import AthenaCommon.AtlasUnixGeneratorJob")
RE_SVCMGR = re.compile(r"from AthenaCommon.AppMgr import ServiceMgr as svcMgr")
RE_CONFIGURABLE = re.compile(r"from AthenaCommon.Configurable import Configurable")
RE_OUTPUTLEVEL = re.compile(r"svcMgr.MessageSvc.OutputLevel\s*=")
RE_FRAGMENT = re.compile(r"include.*\(.*_Fragment\.py")
RE_BUILDHERWIG = re.compile(r"setup\sMSSM/Model\s.*slha")
RE_LHEF=re.compile(r"evgenConfig\.generators.*Lhef")
RE_PYTHIA6 = re.compile(r"include.*\(.*Pythia_\s*")
RE_PYTHIA8 = re.compile(r"include.*\(.*Pythia8_\s*")
RE_PYTHIA8B = re.compile(r"include.*\(.*Pythia8B_\s*")

## Read in the allowed keywords
allowed_keywords = []
kwf = open("./evgenkeywords.txt", "r")
for l in kwf:
    allowed_keywords += l.strip().split()
#print "allowed_keywords ", allowed_keywords

## Parse the command line arguments
import optparse
op = optparse.OptionParser(usage=__doc__)
opts, args = op.parse_args()

## The args are a list of JO files to test for compliance
for jopath in args:
    jo = os.path.basename(jopath)

    ## Check that the file exists! It's ok if not, to test proposed JO names
    if not os.path.exists(jopath):
        print "JO file {f} does not exist".format(f=jopath)
        continue

    ## Count the number of lines
    #count = sum(1 for line in open(jopath))
    with open(jopath) as jofile:
        for line in jofile:
            count = sum(1 for line in jofile if line.rstrip('\n'))
    if count+1 < 3:
        print "too few lines in the JO, probably need to check the included file instead: ", jo
        continue


    joparts = jo.split(".")
    if joparts[0].startswith("MC"):
        ## Check the filename compliance
        if not RE_JONAME.match(jo):
            print "Bad JO name: ", jo
        ## Check the length limit on the physicsShort portion of the filename
        if len(jo.split('.')[2])>60:
            print "Physics field more than 60 characters: ", jo
        ## Check that there are exactly 4 name parts separated by '.': MCxx, DSID, physicsShort, .py
        if len(joparts) != 4:
            print "name format is wrong: must be of the form MC<xx>.<yyyyyy>.<physicsShort>.py: please rename: ", jo
        jo_physshortpart = joparts[2]
        ## There must be at least 2 physicsShort sub-parts separated by '_': gens, (tune)+PDF, and process
        jo_physshortparts = jo_physshortpart.split("_")
        if len(jo_physshortparts) < 2:
            print "there are too few physicsShort fields separated by '_': should contain <generators>(_<tune+PDF_if_available>)_<process>. Please rename: ", jo

    pythia6 = False
    pythia8 = False
    pythia8B = False
    ## Check if EvtGen is used
    with open(jopath) as jofile:
        evtgen = False
        for line in jofile:
            if line.find('EvtGen')!=-1:
                evtgen = True
            ## Check if Pythia is used
            if RE_PYTHIA6.search(line):
                pythia6 = True
            ## Check if Pythia8 is used
            if RE_PYTHIA8.search(line):
                pythia8 = True
            ## Check if Pythia8B is used
            if RE_PYTHIA8B.search(line):
                pythia8B = True

    with open(jopath) as jofile:
        description_ok = False
        process_ok = False
        generators_ok = False
        for line in jofile:
    
            ## Check the generators list (only works if the JO includes evgenConfig.generators directly)
            if RE_GENERATORS.search(line) or RE_GENERATORSPLUS.search(line):
                ## Check for duplicates in the generators list
                duplicate_gen = False
                quoted_gen = re.findall(r"['\"](.*?)['\"]", line)
                ## if Pythia8 is included but not in evgenConfig.generators add it to genpart
                pythia6_in_gennames = False
                pythia8_in_gennames = False
                pythia8B_in_gennames = False
                for ll in quoted_gen:
                    if ll.find('Pythia')!=-1:
                        pythia6_in_gennames = True
                    if ll.find('Pythia8')!=-1:
                        pythia8_in_gennames = True
                    if ll.find('Pythia8B')!=-1:
                        pythia8B_in_gennames = True
                if pythia6 and not pythia6_in_gennames:
                    quoted_gen.append('Pythia')
                if pythia8 and not pythia8_in_gennames:
                    quoted_gen.append('Pythia8')
                if pythia8B and not pythia8B_in_gennames:
                    quoted_gen.append('Pythia8B')
                if len(quoted_gen) > len(set(quoted_gen)):
                    duplicate_gen = True
                if duplicate_gen:
                    print "Duplicate entries in evgenConfig.generators: invalid configuration, please check your JO", jo
                ## Sort the list of generator names into standard form
                gennames = sorted(quoted_gen, key=gen_sortkey)
                evtgen_in_gennames = False
                for ll in gennames:
                    if ll.find('EvtGen')!=-1:
                        evtgen_in_gennames = True
                genpart = jo_physshortparts[0]
                expectedgenpart = ''.join(gennames)
                ## Check if the JO name conatins Photos or Tauola
                if genpart.find('Photos')!=-1:
                    print "found Photos in the JO name, please rename ", jo
                if genpart.find('Tauola')!=-1:
                    print "found Tauola in the JO name, please rename ", jo
                ## if EvtGen is used it should be mentioned in the physicsshort field
                if evtgen and not evtgen_in_gennames:
                    expectedgenpart += 'EvtGen'
                def _norm(s):
                    return s.replace("Photospp", "").replace("Photos", "").replace("Tauola", "")  ## not sure what this is about
                ## make sure the JO name corresponds to the listed generators
                if genpart != expectedgenpart and _norm(genpart) != _norm(expectedgenpart):
                    print "Expected first part of JO name to be %s " % (_norm(expectedgenpart)), "or", expectedgenpart, " but found ", genpart, " please fix: ", jo
                del _norm

                ## Check if the tune/PDF part is needed, and if so whether it's present
                ## ?! isn't that assuming that there are no '_' in the process fieled
                if gens_notune(gennames) and len(jo_physshortparts) < 3:
                    print jo, " with generators ",  expectedgenpart, " has too few physicsShort fields separated by '_'. It should contain <generators>_<tune+PDF_<process>. Please rename."

            ## Check that the keywords are in the list of allowed words
            if RE_KEYWORDS.search(line):
                evil_keywords = []
                quoted = re.findall(r"['\"](.*?)['\"]", line)
                for value in quoted:
                    if value not in allowed_keywords:
                        evil_keywords.append(value)
                #print "evil_keywords ", evil_keywords
                if evil_keywords:
                    print "the following keywords are not in the list of allowed keywords: ", evil_keywords, " for JO: ", jo, " request to be included if necessary"
    
            ## Check that the value of minevents is allowed 
            if RE_MINEVENTS.search(line):
                nev = int(line.split('=', 1)[1].split('=')[0])
                allowed_minevents_lt1000 = [1, 2, 5, 10, 20, 25, 50, 100, 200, 500]
                if nev >= 1000 and nev % 1000 != 0:
                    print "minevents in range >= 1000 must be a multiple of 1000: ", jo
                elif nev < 1000 and nev not in allowed_minevents_lt1000:
                    print "minevents in range < 1000 must be one of %s: " % allowed_minevents_lt1000, " please fix: ", jo
 

            if RE_IMPORTALGSEQUENCE.search(line):
                print "JOs should not re-import AlgSequence: ", line, " the JO is: ", jo
            if RE_EVGENCONFIG.search(line):
                print "JOs should not re-import evgenConfig: ", line, " the JO is: ", jo
            if RE_UNIXGENJOB.search(line):
                print "JOs should not re-import AtlasUnixGeneratorJob: ", line, " the JO is: ", jo
            if RE_SVCMGR.search(line):
                print "JOs should not re-import svcMgr: ", line, " the JO is: ", jo
            if RE_CONFIGURABLE.search(line):
                print "JOs should not re-import Configurable: ", line, " the JO is: ", jo
            if RE_REDEFINITION.search(line):
                print "Avoid assigning a class instance to an object with the class name: ", line, " the JO is: ", jo
            if RE_INPUTBASE.search(line):
                print "evgenConfig.input*base is no longer used: ", line, " the JO is: ", jo
            if RE_EFFICIENCY.search(line):
                print "evgenConfig.efficiency is no longer used: ", line, " the JO is: ", jo
            if RE_AFSPATH.search(line):
                print "JOs should not attempt to access /afs paths: ", line, " the JO is: ", jo
            if RE_SETTOPALG.search(line):
                print "JOs should not use topAlg: ", line, " the JO is: ", jo
            if RE_SETGENSEQ.search(line):
                print "JOs should not redefine genSeq: ", line, " the JO is: ", jo
            if RE_SETFILTSEQ.search(line):
                print "JOs should not redefine filtSeq: ", line, " the JO is: ", jo
            if RE_OUTPUTLEVEL.search(line):
                print "JOs should not try to control the output level: ", line, " the JO is: ", jo
            if RE_FRAGMENT.search(line):
                print "*_Fragment include files should not appear in JOs: ", line, " the JO is: ", jo
            if RE_BUILDHERWIG.search(line):
                print "Should use buildHerwigppCommands() instead of old way, JO: ", jo
            if RE_LHEF.search(line):
                print "Use of generic \"Lhef\" in evgenConfig\.generators field is discouraged. Use specific generator name, JO: ", jo
    
            if not description_ok and RE_DESCRIPTION.search(line):
                description_ok = True
    
            if not process_ok and RE_PROCESS.search(line):
                process_ok = True
    
            if not generators_ok and (RE_GENERATORS.search(line) or RE_GENERATORSPLUS.search(line)):
                generators_ok = True


        if not description_ok:
            print "evgenConfig.description must be provided for JO: ", jo

        ##if not process_ok:
        ##    print "evgenConfig.process must be provided for JO: ", jo

        if not generators_ok:
            ##print "evgenConfig.generators must be provided for JO: ", jo
            print "please check evgenConfig.generators in include files for JO: ", jo



